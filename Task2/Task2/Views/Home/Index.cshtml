@model List<User>
@{
    ViewData["Title"] = "Home";
}
    <script>
        var db = null;

        try {
            if (window.openDatabase) {
                db = openDatabase("NoteTest", "1.0", "HTML5 Database API example", 200000);
                if (!db)
                { }
            } else
            { }
        } catch (err) {
            db = null;
            { }
        }

        var captured = null;
        var highestZ = 0;
        var highestId = 0;

        function Note() {
            var self = this;

            var note = document.createElement('div');
            note.className = 'note';
            note.addEventListener('mousedown', function (e) { return self.onMouseDown(e) }, false);
            note.addEventListener('click', function () { return self.onNoteClick() }, false);
            this.note = note;

            var close = document.createElement('div');
            close.className = 'closebutton';
            close.addEventListener('click', function (event) { return self.close(event) }, false);
            note.appendChild(close);

            var edit = document.createElement('div');
            edit.className = 'edit';
            edit.setAttribute('contenteditable', true);
            edit.addEventListener('keyup', function () { return self.onKeyUp() }, false);
            note.appendChild(edit);
            this.editField = edit;

            document.body.appendChild(note);
            return this;
        }

        Note.prototype = {
            get id() {
                if (!("_id" in this))
                    this._id = 0;
                return this._id;
            },

            set id(x) {
                this._id = x;
            },

            get text() {
                return this.editField.innerHTML;
            },

            set text(x) {
                this.editField.innerHTML = x;
            },

            get left() {
                return this.note.style.left;
            },

            set left(x) {
                this.note.style.left = x;
            },

            get top() {
                return this.note.style.top;
            },

            set top(x) {
                this.note.style.top = x;
            },

            get zIndex() {
                return this.note.style.zIndex;
            },

            set zIndex(x) {
                this.note.style.zIndex = x;
            },

            close: function (event) {
                this.cancelPendingSave();

                var note = this;
                db.transaction(function (tx) {
                    tx.executeSql("DELETE FROM NoteDB WHERE id = ?", [note.id]);
                });
                this.note.style.opacity = '0';

                var self = this;
                setTimeout(function () { document.body.removeChild(self.note) }, duration * 1000);
            },

            saveSoon: function () {
                this.cancelPendingSave();
                var self = this;
                this._saveTimer = setTimeout(function () { self.save() }, 200);
            },

            cancelPendingSave: function () {
                if (!("_saveTimer" in this))
                    return;
                clearTimeout(this._saveTimer);
                delete this._saveTimer;
            },

            save: function () {
                this.cancelPendingSave();

                if ("dirty" in this) {
                    delete this.dirty;
                }

                var note = this;
                db.transaction(function (tx) {
                    tx.executeSql("UPDATE NoteDB SET note = ?, left = ?, top = ?, zindex = ? WHERE id = ?", [note.text, note.left, note.top, note.zIndex, note.id]);
                });
            },

            saveAsNew: function () {
                var note = this;
                db.transaction(function (tx) {
                    tx.executeSql("INSERT INTO NoteDB (id, note, left, top, zindex) VALUES (?, ?, ?, ?, ?)", [note.id, note.text, note.left, note.top, note.zIndex]);
                });
            },

            onMouseDown: function (e) {
                captured = this;
                this.startX = e.clientX - this.note.offsetLeft;
                this.startY = e.clientY - this.note.offsetTop;
                this.zIndex = ++highestZ;

                var self = this;
                if (!("mouseMoveHandler" in this)) {
                    this.mouseMoveHandler = function (e) { return self.onMouseMove(e) }
                    this.mouseUpHandler = function (e) { return self.onMouseUp(e) }
                }

                document.addEventListener('mousemove', this.mouseMoveHandler, true);
                document.addEventListener('mouseup', this.mouseUpHandler, true);

                return false;
            },

            onMouseMove: function (e) {
                if (this != captured)
                    return true;

                this.left = e.clientX - this.startX + 'px';
                this.top = e.clientY - this.startY + 'px';
                return false;
            },

            onMouseUp: function (e) {
                document.removeEventListener('mousemove', this.mouseMoveHandler, true);
                document.removeEventListener('mouseup', this.mouseUpHandler, true);

                this.save();
                return false;
            },

            onNoteClick: function (e) {
                this.editField.focus();
                getSelection().collapseToEnd();
            },

            onKeyUp: function () {
                this.dirty = true;
                this.saveSoon();
            },
        }

        function loaded() {
            db.transaction(function (tx) {
                tx.executeSql("SELECT COUNT(*) FROM NoteDB", [], function (result) {
                    loadNotes();
                }, function (tx, error) {
                    tx.executeSql("CREATE TABLE NoteDB (id REAL UNIQUE, note TEXT, left TEXT, top TEXT, zindex REAL)", [], function (result) {
                        loadNotes();
                    });
                });
            });
        }

        function loadNotes() {
            db.transaction(function (tx) {
                tx.executeSql("SELECT id, note, left, top, zindex FROM NoteDB", [], function (tx, result) {
                    for (var i = 0; i < result.rows.length; ++i) {
                        var row = result.rows.item(i);
                        var note = new Note();
                        note.id = row['id'];
                        note.text = row['note'];
                        note.left = row['left'];
                        note.top = row['top'];
                        note.zIndex = row['zindex'];

                        if (row['id'] > highestId)
                            highestId = row['id'];
                        if (row['zindex'] > highestZ)
                            highestZ = row['zindex'];
                    }
                }, function (tx, error) {
                    return;
                });
            });
        }

        function newNote() {
            var note = new Note();
            note.id = ++highestId;
            note.left = Math.round(Math.random() * 400) + 'px';
            note.top = Math.round(Math.random() * 500) + 'px';
            note.zIndex = ++highestZ;
            note.saveAsNew();
        }

        if (db != null)
            addEventListener('load', loaded, false);
    </script>
    <form method="post">
        <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
            <div class="btn-group btn-group-sm" role="group" aria-label="Basic example">
                <button type="submit" class="btn btn-secondary btn-group" asp-route-s1="Delete">@ViewData["Id"]</button>
                <button type="submit" class="btn btn-secondary btn-group" asp-route-s1="Block">Заблокировать выделенных</button>
                <button type="submit" class="btn btn-secondary btn-group" asp-route-s1="UnBlock">Разблокировать выделенных</button>
                </div>
        </nav>
            <table class="table table-hover table-sm">
                <thead class="thead-dark">
                    <tr>
                        <th scope="col">
                            <input type="checkbox" id="select-all" class="chkbox">
                        </th>
                        <th scope="col">Email</th>
                        <th scope="col">Login</th>
                        <th scope="col">Дата регистации</th>
                        <th scope="col">Дата последнего захода</th>
                        <th scope="col">Status</th>
                        <th scope="col"></th>
                    </tr>
                </thead>
                <tbody>
                    @for (int i = 0; i < Model.Count; i++)
                    {
                        <tr>
                            <td scope="row">
                                <input asp-for="@Model[i].Check" class="chkbox" />
                            </td>
                            <td><input type="hidden" asp-for="@Model[i].Email" />@Model[i].Email</td>
                            <td><input type="hidden" asp-for="@Model[i].Login" />@Model[i].Login</td>
                            <td><input type="hidden" asp-for="@Model[i].DateRegistration" />@Model[i].DateRegistration</td>
                            <td><input type="hidden" asp-for="@Model[i].DataRelease" />@Model[i].DataRelease</td>
                            @if (!Model[i].Block)
                            {
                                <td class="text-success">Разблокирован</td>
                            }
                            else
                            {
                                <td class="text-danger">Заблокирован</td>
                            }
                            @if (Model[i].Status)
                            {
                                <td class="text-success">&#149; online</td>
                            }
                            else
                            {
                                <td class="text-danger">offline</td>
                            }
                        </tr>
                    }
                </tbody>
            </table>
    </form>
    